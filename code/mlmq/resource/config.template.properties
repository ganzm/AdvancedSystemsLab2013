############################
# Tuning Parameters
############################

# Number of Workers processing the RequestQueue
broker.workerthread.count = 4

# Size of the Queue of Requests which are not yet assigned to a Worker
broker.requestqueue.size = 100

# Size of the Queue where Workers put their Responses which are ready to be sent back to the clients
broker.responsequeue.size = 100

# the size of the biggest possible message
broker.message.maxsize = 5000

broker.db.connectionpool.size= 3

############################
# System Parameters
############################

# How long to wait for a response from a Broker
client.response.timeout = 6000

# how long should i sleep if we fail to establish broker connection before retrying
client.reconnect.sleeptime = 5000

# how many times should I try to connect to a broker before giving up
client.reconnect.count = 100

# client.delay is used to automatically delay groups of clients
# how does it work: each client may be delayed depending on the client's position (common.scenario.myposition)
# myPosition / groupSize defines to which group a client belongs to (starting a 0 if we use int division)
# group 0 is not delayed, group 1 is delayed by 1x delaypergroup, group 2 is delayed by 2x delaypergroup
# e.g.: 10 clients, groupSize = 2, delaypergroup = 5min 
# => at start 2 clients will connect, 5min later 2 more clients will connect, and so forth
# defines the number of client
client.delay.groupsize=5
# defines the delay each group has in minutes (may be 0 or negative to disable this feature)
client.delay.delaypergroup=-1

# folder where to write the performance log
common.performancelogger.logfilepath = performance_log

# file which is watched by this broker instance waiting for (shutdown) commando
common.commandofile.path = commando.txt

# intervall in ms to check the commando file
common.commandofile.checkintervall = 5000

##################################################
# Scenario Parameters
##################################################

scenario.SimpleSendClient.numMessages = 100000

scenario.SimpleSendClient.waitTimeBetweenMessages = 5

scenario.SimpleReceiveClient.waitTimeBetweenActions = 1

# shutdown delay in seconds
scenario.SimpleShutdownBroker.shutdownDelay =  120

##################################################
#
# Dynamically generated per test run from here on
#
##################################################

broker.db.url= #{MLMQ_DB_URL}
broker.db.username= #{MLMQ_DB_USER}
broker.db.password= #{MLMQ_DB_PASSWORD}
broker.db.name = #{MLMQ_DB_NAME}

# Scenario mapping format: name1:ip,ip,ip,...;name2:ip,ip,...;name3:ip,ip,...
# E.g. scenario.mapping = broker:127.0.0.1,192.168.0.2;client:127.0.0.1,192.168.0.1
# Here: only one broker and one client
common.scenario.mapping.broker = #{MLMQ_BROKER_MAPPING}
common.scenario.mapping.client = #{MLMQ_CLIENT_MAPPING}

# either broker or client
common.scenario.mytype = #{MLMQ_SCENARIO_TYPE}

# If the position is 5 and mytype is a broker, then this means that this is the 5th broker
# myposition starts at position 0
common.scenario.myposition = #{MLMQ_SCENARIO_POSITION}
